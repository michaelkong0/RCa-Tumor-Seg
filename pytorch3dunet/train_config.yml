model:
  name: UNet3D
  # number of input channels to the model
  in_channels: 1
  # number of output channels
  out_channels: 1
  # determines the order of operators in a single layer (crg - Conv3d+ReLU+GroupNorm)
  layer_order: crg
  # initial number of feature maps
  f_maps: 32
  # number of groups in the groupnorm
  num_groups: 8
  # apply element-wise nn.Sigmoid after the final 1x1x1 convolution, otherwise apply nn.Softmax
  final_sigmoid: True

  is_segmentation: true
# loss function to be used during training
loss:
  name: DiceLoss
  # a target value that is ignored and does not contribute to the input gradient
  ignore_index: null
  # skip the last channel in the target (i.e. when last channel contains data not relevant for the loss)
  skip_last_target: false
optimizer:
  # initial learning rate
  learning_rate: 0.01
  # weight deca
  weight_decay: 0.0001
# evaluation metric
eval_metric:
  # use AdaptedRandError metric
  name: DiceCoefficient
  # probability maps threshold
  threshold: 0.1
  # use the last target channel to compute the metric
  use_last_target: false
  # use only the first channel for computing the metric
  use_first_input: false
lr_scheduler:
  name: ReduceLROnPlateau
  # make sure to use the 'min' mode cause lower AdaptedRandError is better
  mode: max
  factor: 0.05
  patience: 30
trainer:
  eval_score_higher_is_better: True
  # path to the checkpoint directory
  checkpoint_dir: C:\Users\theev\OneDrive\Documents\LAB\Code\3DUNetTest\Checkpoint
  # path to latest checkpoint; if provided the training will be resumed from that checkpoint
  resume: null
  # path to the best_checkpoint.pytorch; to be used for fine-tuning the model with additional ground truth
  pre_trained: null
  # how many iterations between validations
  validate_after_iters: 150
  # how many iterations between tensorboard logging
  log_after_iters: 75
  # max number of epochs
  max_num_epochs: 300
  # max number of iterations
  max_num_iterations: 3000
# Configure training and validation loaders

loaders:
  # how many subprocesses to use for data loading
  num_workers: 8
  # path to the raw data within the H5
  raw_internal_path: /raw
  # path to the the label data withtin the H5
  label_internal_path: /label
  # configuration of the train loader
  train:
    # path to the training datasets
    file_paths:
      - C:\Users\theev\OneDrive\Documents\LAB\Code\3DUNetTest\train.h5

    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch
    slice_builder:
      name: SliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [24, 120, 120]
      # train stride between patches
      stride_shape: [12, 60, 60]

    transformer:
      raw:
        - name: Standardize
        - name: RandomFlip
        - name: RandomRotate90
        - name: RandomRotate
          # rotate only in ZY plane due to anisotropy
          axes: [[2, 1]]
          angle_spectrum: 30
          mode: reflect
        - name: GaussianBlur3D
          execution_probability: 0.01
        - name: AdditiveGaussianNoise
          execution_probability: 0.005
        - name: AdditivePoissonNoise
          execution_probability: 0.005
        - name: ToTensor
          expand_dims: true
      label:
        - name: RandomFlip
        - name: RandomRotate90
        - name: RandomRotate
          # rotate only in ZY plane due to anisotropy
          axes: [[2, 1]]
          angle_spectrum: 30
          mode: reflect
        - name: ToTensor
          expand_dims: false
        - name: Relabel
        - name: BlobsToMask
          append_label: false
          boundary: false

  # configuration of the val loader
  val:
    # path to the val datasets
    file_paths:
      - C:\Users\theev\OneDrive\Documents\LAB\Code\3DUNetTest\val.h5

    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch
    slice_builder:
      name: SliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [24, 120, 120]
      # train stride between patches
      stride_shape: [12, 60, 60]

    # data augmentation
    transformer:
      raw:
        - name: Standardize
        - name: ToTensor
          expand_dims: true
      label:
        - name: ToTensor
          expand_dims: false
        - name: Relabel
        - name: BlobsToMask
          append_label: false
          boundary: false